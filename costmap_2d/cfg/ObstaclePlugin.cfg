#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, bool_t, double_t, int_t

gen = ParameterGenerator()

gen.add("enabled", bool_t, 0, "Whether to apply this plugin or not", True)
gen.add("footprint_clearing_enabled", bool_t, 0, "Whether to clear the robot's footprint of lethal obstacles", True)
gen.add("max_obstacle_height", double_t, 0, "The maximum height of any obstacle to be inserted into the costmap in meters.", 2, 0, 50)

combo_enum = gen.enum([ gen.const("Overwrite", int_t,  0, "Overwrite values"),
                        gen.const("Maximum",   int_t,  1, "Take the maximum of the values"), 
                        gen.const("Nothing",   int_t, 99, "Do nothing")
                      ],
                      "Method for combining layers enum")

gen.add("combination_method", int_t, 0, "Method for combining two layers", 1, edit_method=combo_enum)

gen.add("obstacle_lifespan", double_t, 0, "Number of seconds to remember an observations without proof", 3.0, 0, 3600.0)
gen.add("obstacle_keep_radius", double_t, 0, "Radius within which no obstacles will be forgotten", 1.7, 0, 100)
gen.add("enable_forget", bool_t, 0, "If observations should be allowed to be forgotten", True)
gen.add("pose_confidence_threshold", double_t, 0, "Pose confidence threshold below which obstacles are not remembered.", 0.7, 0, 1)

#gen.add("max_obstacle_range", double_t, 0, "The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters.", 2.5, 0, 50)
#gen.add("raytrace_range", double_t, 0, "The default range in meters at which to raytrace out obstacles from the map using sensor data.", 3, 0, 50)
exit(gen.generate("costmap_2d", "costmap_2d", "ObstaclePlugin"))
